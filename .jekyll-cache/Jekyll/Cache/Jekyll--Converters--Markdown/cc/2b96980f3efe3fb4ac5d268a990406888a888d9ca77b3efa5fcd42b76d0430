I"E<ul id="markdown-toc">
  <li><a href="#数据结构" id="markdown-toc-数据结构">数据结构</a></li>
  <li><a href="#算法" id="markdown-toc-算法">算法</a></li>
</ul>

<hr />

<h2 id="数据结构">数据结构</h2>

<p>回顾上次我们描述<strong><a href="/2019/05/15/QuickMatrixTrans/">稀疏矩阵转置算法</a></strong>时描述稀疏矩阵的数据结构。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># define MAXSIZE 12500          // 最大的非零元素个数
</span><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>               		<span class="c1">// 分别表示非零元素的行下标和列下标</span>
    <span class="n">ElemType</span> <span class="n">e</span><span class="p">;</span>                	<span class="c1">// 元素值</span>
<span class="p">}</span><span class="n">Triple</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">union</span><span class="p">{</span>
    <span class="n">Triple</span> <span class="n">data</span><span class="p">[</span><span class="n">MAXSIZE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>  	<span class="c1">// 所有的非零元素， data[0]弃用</span>
    <span class="kt">int</span> <span class="n">mu</span><span class="p">,</span> <span class="n">nu</span><span class="p">,</span> <span class="n">tu</span><span class="p">;</span>             <span class="c1">// 矩阵的行数、列数和总共的非零元素个数</span>
<span class="p">}</span><span class="n">TSMatrix</span><span class="p">;</span>
</code></pre></div></div>

<p>可以发现这个样的数据结构无法<strong>随机地定位任意一行非零元</strong>，因此为了方便做乘法，需要重构数据结构辅助创建一个<code class="language-plaintext highlighter-rouge">带有每行首个非零元位置的数组</code>。这类<code class="language-plaintext highlighter-rouge">带有行链接信息</code>的三元组表又被称作<code class="language-plaintext highlighter-rouge">行逻辑链接的顺序表</code>如下：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">Triple</span> <span class="n">data</span><span class="p">[</span><span class="n">MAXSIZE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>  	<span class="c1">// 所有的非零元素， data[0]弃用</span>
    <span class="kt">int</span> <span class="n">rpos</span><span class="p">[</span><span class="n">MAXRC</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>		<span class="c1">// 各行第一个非零元素的位置表</span>
    <span class="kt">int</span> <span class="n">mu</span><span class="p">,</span> <span class="n">nu</span><span class="p">,</span> <span class="n">tu</span><span class="p">;</span>             <span class="c1">// 矩阵的行数、列数和总共的非零元素个数</span>
<span class="p">}</span><span class="n">TSMatrix</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="算法">算法</h2>

<p>对于传统的矩阵相乘\(Q=M\times N\)，其中\(M\)为\(m_1\times n_1\)矩阵，\(N\)为\(m_2\times n_2\)矩阵，若\(n_1 = m_2 = K\)，则有：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="c1">// 左矩阵的每一行</span>
    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">){</span>
       <span class="c1">// 右矩阵的每一列</span>
        <span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n1</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">){</span>
            <span class="c1">// 左矩阵的列数 = 右矩阵的行数</span>
            <span class="c1">// 对于左矩阵特定行 和 右矩阵特定列 元素逐一相乘再求和</span>
            <span class="n">Q</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>该算法的时间复杂度为\(O(m_1 \times K \times n2)\)对于三元组表作为存储结构的时候上述的运算不能直接套用，可以做出如下分析：</p>

<ol>
  <li>
    <p>乘积矩阵\(Q\)中元素的表示方式为：</p>

\[\boldsymbol{Q}(i, j)=\sum_{k=1}^{K} M(i, k) \times N(k, j)
\quad
\begin{array}{}
1 \leqslant i \leqslant m_{1}  \\ 
1 \leqslant j \leqslant n_{2} 
\end{array}\]
  </li>
  <li>
    <p>0和任何数相乘都为0，因此上述算法中的 <code class="language-plaintext highlighter-rouge">M[i][k] * N[k][j]</code>中的<code class="language-plaintext highlighter-rouge">M[i][k]</code>和<code class="language-plaintext highlighter-rouge">N[k][j]</code>都必须为非0的项。</p>

    <p>因此只需要确保<strong><code class="language-plaintext highlighter-rouge">M.data[each_p].j = N.data[each_q].i</code></strong>匹配的元素才进行运算。</p>
  </li>
  <li>
    <p>若<code class="language-plaintext highlighter-rouge">M.data[p].j = N.data[q].i</code>，计算得到的<code class="language-plaintext highlighter-rouge">M.data[p].e * N.data[q].e</code>也只是目标矩阵的某个元的其中一部分，真正的元还需要累加这些结果，因此需要一个<strong>累加器</strong>来存储结果。</p>
  </li>
  <li>
    <p>虽然\(M\)和\(N\)都是稀疏矩阵，但是结果未必是稀疏矩阵。同时，\(Q\)的元素是否是非零元只有在累加完毕后才能得知。<strong>由于\(Q\)中元素的行号和\(M\)中元素的行号一致，且\(M\)中元素的排列是以M的行序为主序的</strong>，所以对\(Q\)进行计算的时候可以对\(Q\)进行逐行处理，先求得中间结果（<strong>\(Q\)的一行</strong>），再压缩到<code class="language-plaintext highlighter-rouge">Q.data</code>中去。</p>
  </li>
</ol>

<div style="text-align: center;"><img style="height:400px;width:;" alt="" title="" src="https://ss.caihuashuai.com/StaticData/Blog/RLSMatrix/RLSMatrix_multi.gif" /></div>

<p>具体思路如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q初始化
if(M.tu * N.tu != 0){
	for(M的每一行arow{
		累加器清0
		
		计算Q中第arow行的N.nu个结果存入累加器
		
		将累加器中的非零元存入 Q.data
	}
}
</code></pre></div></div>

<p>具体算法如下:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Status</span> <span class="nf">MultSMatrix</span><span class="p">(</span><span class="n">RLSMatrix</span> <span class="n">M</span><span class="p">,</span> <span class="n">RLSMatrix</span> <span class="n">N</span><span class="p">,</span> <span class="n">RLSMatrix</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">M</span><span class="p">.</span><span class="n">nu</span> <span class="o">!=</span> <span class="n">N</span><span class="p">.</span><span class="n">mu</span><span class="p">)</span> <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
    <span class="n">Q</span><span class="p">.</span><span class="n">mu</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">mu</span><span class="p">;</span> <span class="n">Q</span><span class="p">.</span><span class="n">nu</span> <span class="o">=</span> <span class="n">N</span><span class="p">.</span><span class="n">nu</span><span class="p">;</span> <span class="n">Q</span><span class="p">.</span><span class="n">tu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 初始化Q</span>
   	<span class="k">if</span><span class="p">(</span><span class="n">M</span><span class="p">.</span><span class="n">tu</span> <span class="o">*</span> <span class="n">N</span><span class="p">.</span><span class="n">tu</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
        <span class="c1">// 确保不能直接得出0矩阵的结果</span>
        <span class="k">for</span><span class="p">(</span><span class="n">arrow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">arow</span> <span class="o">&lt;=</span> <span class="n">M</span><span class="p">.</span><span class="n">mu</span><span class="p">;</span> <span class="o">++</span><span class="n">arow</span><span class="p">){</span>
            <span class="c1">// 处理 M 的每一行</span>
            <span class="c1">// 当前行的各元素的累加器（数组长度为M.nu,最后ctemp中将为Q的第arow行的所有元素值）</span>
            <span class="n">ctemp</span><span class="p">[]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="c1">// Q的每一行的第一个非0元素，都会等于目前Q的所有元素个数 + 1 （因为Q是行主序的）</span>
            <span class="n">Q</span><span class="p">.</span><span class="n">rpos</span><span class="p">[</span><span class="n">arow</span><span class="p">]</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">tu</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">rpos</span><span class="p">[</span><span class="n">arow</span><span class="p">];</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">.</span><span class="n">rpos</span><span class="p">[</span><span class="n">arow</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span> <span class="o">++</span><span class="n">p</span><span class="p">){</span>
                <span class="c1">// 遍历M当前行的每一个非零元素（列）</span>
                
                <span class="c1">// 直接含义：获取当前元素的列号</span>
                <span class="c1">// 隐藏含义：获取N中对应元素的行号</span>
                <span class="n">brow</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="p">].</span><span class="n">j</span><span class="p">;</span> 
                
                <span class="c1">// t为 N中对应行的最后一个元素的位置 + 1 （从而可以遍历N中对应的行，使得 累加器的的元素（列）都能增加，直到M当前行中的最后一个元素被遍历，累加器才全部构造好Q第一行的元素。）</span>
                <span class="k">if</span><span class="p">(</span><span class="n">brow</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">.</span><span class="n">nu</span><span class="p">)</span> <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">.</span><span class="n">rpos</span><span class="p">[</span><span class="n">brow</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
                <span class="k">else</span> <span class="p">{</span> <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">.</span><span class="n">tu</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
                <span class="k">for</span><span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="n">N</span><span class="p">.</span><span class="n">rpos</span><span class="p">[</span><span class="n">brow</span><span class="p">];</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">){</span>
                    <span class="c1">// 乘积元素在Q中的列号</span>
                    <span class="n">ccol</span> <span class="o">=</span> <span class="n">N</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">q</span><span class="p">].</span><span class="n">j</span><span class="p">;</span>
                    <span class="c1">// 累加每一列的乘积和</span>
                    <span class="n">ctemp</span><span class="p">[</span><span class="n">ccol</span><span class="p">]</span> <span class="o">+=</span> <span class="n">M</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">p</span><span class="p">].</span><span class="n">e</span> <span class="o">*</span> <span class="n">N</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">q</span><span class="p">].</span><span class="n">e</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">// 这一行的结果已经计算出。</span>
            <span class="c1">// 压缩这一行到Q中。</span>
            <span class="k">for</span><span class="p">(</span><span class="n">ccol</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">ccol</span> <span class="o">&lt;</span> <span class="n">Q</span><span class="p">.</span><span class="n">nu</span><span class="p">;</span> <span class="o">++</span><span class="n">ccol</span><span class="p">){</span>
                <span class="k">if</span><span class="p">(</span><span class="n">ctemp</span><span class="p">[</span><span class="n">ccol</span><span class="p">]){</span>
                    <span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="n">Q</span><span class="p">.</span><span class="n">tu</span> <span class="o">&gt;</span> <span class="n">MAXSIZE</span><span class="p">)</span> <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
                    <span class="n">Q</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">Q</span><span class="p">.</span><span class="n">tu</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">arow</span><span class="p">,</span> <span class="n">ccol</span><span class="p">,</span> <span class="n">ctemp</span><span class="p">[</span><span class="n">ccol</span><span class="p">]};</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>分析上述算法可得，<code class="language-plaintext highlighter-rouge">ctemp</code>初始化的时间复杂度为\(O(M.mu \times N.nu)\)(初始化应该就是置空的意思，<code class="language-plaintext highlighter-rouge">ctemp</code>的元素个数是<code class="language-plaintext highlighter-rouge">N.nu</code>)。求\(Q\)的所有非零元的时间复杂度为\(O(M.mu \times N.tu/N.mu)\)(\(N.tu/N.mu\)就是平均每行的元素个数)，进行压缩的时间复杂度为\(O(M.mu \times N.nu)\)。因此，总复杂度是\(O(M.mu \times N.nu + M.tu \times N.tu/N.mu)\)。</p>

<p>当\(M\)是一个\(m\)行\(n\)列的稀疏矩阵，\(N\)是一个$n$行$p$列的稀疏矩阵。则$M$中的非零元素个数为$\mathrm{M} . \mathrm{tu}=\delta_{\mathrm{M}} \times \mathrm{m} \times \mathrm{n}$，$N$中的非零元素个数为$\mathrm{N} . \mathrm{tu}=\delta_{\mathrm{N}} \times \mathrm{n} \times \mathrm{p}$。此时算法总体的时间复杂度为$O(m \times p \times (1 + n\delta_{\mathrm{M}}\delta_{\mathrm{N}}))$，当$\delta_{\mathrm{M}} &lt; 0.05$和$\delta_{\mathrm{N}} &lt; 0.05$及$n &lt; 1000$时就相当于$O(m \times p)$。</p>

:ET