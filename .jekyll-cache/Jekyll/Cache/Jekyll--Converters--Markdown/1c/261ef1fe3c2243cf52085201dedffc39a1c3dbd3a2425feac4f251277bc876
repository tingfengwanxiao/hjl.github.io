I"72<ul id="markdown-toc">
  <li><a href="#这是一个开始" id="markdown-toc-这是一个开始">这是一个开始</a></li>
  <li><a href="#why-github-page--jekyll" id="markdown-toc-why-github-page--jekyll">Why Github Page + Jekyll</a></li>
  <li><a href="#jekyll" id="markdown-toc-jekyll">Jekyll</a>    <ul>
      <li><a href="#安装" id="markdown-toc-安装">安装</a>        <ul>
          <li><a href="#安装ruby" id="markdown-toc-安装ruby">安装Ruby</a></li>
          <li><a href="#安装jekyll" id="markdown-toc-安装jekyll">安装Jekyll</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#相关参考" id="markdown-toc-相关参考">相关参考</a></li>
  <li><a href="#注意事项" id="markdown-toc-注意事项">注意事项</a></li>
</ul>

<!-- 这是我的第一个代码显示脚本 -- <script>demo_js.EmbedDemo("89798dasoid")</script> -->

<center><img alt="" title="" src="/image/2019/03/31/building_website.svg" /></center>

<h2 id="这是一个开始">这是一个开始</h2>

<p>由于<a href="https://caihuashuai.blogspot.com/">Blogger平台</a>对于<code class="language-plaintext highlighter-rouge">Markdown</code>以及相关的代码显示功能没有原生的支持，所以我决定自建站点用于记录我的计算机学习经历。</p>

<p>再者，将类似于WordPress之类的博客系统在VPS或Cloud上部署会不可避免地随着时间的增长增大相关的维护成本——尤其是<strong>数据安全</strong>以及<strong>站点的可访问性</strong>相关的维护。所以就有了这里，部署在Github Page上的基于Jekyll的静态博客。</p>

<p>我将会在这里记录我所有的IT大方向的学习经历，包括但不限于:</p>

<ul>
  <li>对学习方法本身的探讨</li>
  <li>各端软件开发相关技术</li>
  <li>IT范畴内相关原理的科普向解释</li>
  <li>与查错、纠错相关的记录与探讨</li>
  <li>程序语言本身的探讨</li>
  <li>科技生活类的内容
    <ul>
      <li>操作系统下基于已有程序或自实现的各种问题的自动化方案</li>
      <li>与实物或动手操作相关的科技产品或方案探讨
___</li>
    </ul>
  </li>
</ul>

<h2 id="why-github-page--jekyll">Why Github Page + Jekyll</h2>

<p>其实我之前有尝试使用过多种博客系统来做技术博客，包括WordPress、博客园、Blogger、Hexo(on Github Page)。它们都或多或少地各种存在先天的缺陷，使得我无法<strong>花尽可能少的精力到博客本身维护，花尽可能多的经历到博客内容的创作</strong>。</p>

<p>可以明确地对上述博客系统进行划分：</p>

<hr />

<table class="not_extern">
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th>WordPress</th>
      <th>博客园</th>
      <th>Blogger</th>
      <th>Hexo</th>
      <th>Jekyll</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><center>需要维护站点</center></td>
      <td><center style="color:red">✔</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
    </tr>
    <tr>
      <td><center>需要科学上网</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:red">✔</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
    </tr>
    <tr>
      <td><center>全样式自定义</center></td>
      <td><center style="color:green">✔</center></td>
      <td><center style="color:red">✖</center></td>
      <td><center style="color:red">✖</center></td>
      <td><center style="color:green">✔</center></td>
      <td><center style="color:green">✔</center></td>
    </tr>
    <tr>
      <td><center><span title="广告、社交关系等" style="text-decoration:underline;">潜在信息侵入</span></center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:red">✔</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
      <td><center style="color:green">✖</center></td>
    </tr>
    <tr>
      <td><center><span title="Github Page支持自动生成静态页面" style="text-decoration:underline;">页面自动生成</span></center></td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td><center style="color:red">✖</center></td>
      <td><center style="color:green">✔</center></td>
    </tr>
    <tr>
      <td><center>站内编辑博客</center></td>
      <td><center style="color:green">✔</center></td>
      <td><center style="color:green">✔</center></td>
      <td><center style="color:green">✔</center></td>
      <td><center style="color:red">✖</center></td>
      <td><center style="color:red">✖</center></td>
    </tr>
  </tbody>
</table>

<hr />

<p>对我来说，最重要的是<strong>是否需要维护站点</strong>。数据安全是最重要的，哪怕这些数据都是裸着公布出来的，我也一点也不希望它被添加、篡改或删除；其次才是站点地可用性：宕机的可能性、如何配置安全策略从而避免被流量攻击等等，虽然这些大多都是一劳永逸的，但至少目前对于我来说我并没有在互联网上能够看到一个<strong>对个人站点适用的，能避免绝大多数内部问题和外部攻击的策略与相关配置流程</strong>，更何况像Bandwagon这类的VPS基本上“例行性”的宕机且<strong>隐藏着各种复杂的内部用户条款——有一万个理由挂起你的服务器</strong>。没有一个在职的维护人员配合，在这种需要随时应对问题的平台上进行内容创作与管理是一件极其费心的一件事。</p>

<h2 id="jekyll">Jekyll</h2>

<center><img alt="" title="" src="/image/2019/03/31/logo-2x.png" /></center>

<p>使用Jekyll在Github Page上进行博客创作是Github官方推荐的Page的使用方式之一。</p>

<blockquote>
  <p>If you use Jekyll as a static site generator with GitHub Pages, you benefit from more support with setting up, updating, and troubleshooting your site.</p>
</blockquote>

<p>Github Page支持将用户提交的post自动处理成静态页面，这就意味着在你配置好Jekyll后，你只需要一个Git和一个文本编辑器<small>(<del>而不需要本地的Jekyll环境，虽然它确实在预览页面上能提供很大的帮助</del>)</small>就能随时地发布新的文章和管理从前发布的文章。</p>

<p>它基于Ruby编写，在项目的根目录用户可以通过配置文件<code class="language-plaintext highlighter-rouge">_config.yml</code>操控Jekyll的行为。总体上的<strong>仅改变配置文件和编辑模板文件</strong>你可以用Jekyll实现以下一些功能：</p>

<ul>
  <li>被动地使用页面模板导出页面:<a href="https://jekyllrb.com/docs/layouts/">layout</a></li>
  <li>主动地使用页面模板导出页面:<a href="https://jekyllrb.com/docs/includes/">include</a></li>
  <li>处理存于文件中的静态数据:<a href="https://jekyllrb.com/docs/datafiles/">Data Files</a></li>
  <li>获取博客相关的元信息:<a href="https://jekyllrb.com/docs/variables/">Variables</a></li>
  <li>在模板内部进行变量定义、流程控制、过滤器操作等从而控制导出的结果:<a href="https://jekyllrb.com/docs/liquid/">Liquid</a>(模板语言)</li>
  <li>分页、主题、插件等</li>
</ul>

<h3 id="安装">安装</h3>

<p><small><del>如果你只想快捷地写博客你其实并不需要安装Jeykll，甚至你可以直接Git clone我的项目，再把我的/_posts下的文章删去，按照我的格式直接Push你自己的文章即可。</del> </small></p>

<p>由于目前我是用的是Windows平台，故该文档只有Windows平台的参考。下面是我的操作陈述，如有冗余操作请在下方告诉我，谢谢。</p>

<h4 id="安装ruby">安装Ruby</h4>

<p>进入<a href="https://www.ruby-lang.org/en/downloads/">RubyInstaller下载页面</a>下载Installer <strong>with Devkit</strong>。</p>

<p>勾选toolchain。</p>
<center><img alt="" title="" src="/image/2019/03/31/1554021299.jpg" /></center>

<p>安装完成后，Ruby将存放在C盘根目录，勾选“Run ridk install ……”并finishh，将弹出下图所示命令窗口，输入<code class="language-plaintext highlighter-rouge">3</code>并回车。</p>
<center><img alt="" title="" src="/image/2019/03/31/Snipaste_2019-03-31_16-39-33.png" /></center>

<p>最后将提示: <code class="language-plaintext highlighter-rouge">Install MSYS2 and MINGW development toolchain succeeded</code></p>

<h4 id="安装jekyll">安装Jekyll</h4>
<p>进入任何一个你想安装博客的文件夹（这会是最终项目目录的父文件夹），<code class="language-plaintext highlighter-rouge">Shift+右键打开Powershell</code>输入:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">bundler</span><span class="w">
</span></code></pre></div></div>
<p>Jekyll和bundler安装完毕以后，可以通过Jekyll创建一个带有<code class="language-plaintext highlighter-rouge">minima</code>主题的博客。</p>

<p>运行 <code class="language-plaintext highlighter-rouge">jeykll s</code>，再访问localhost:4000，你就能看到自己的博客了！</p>
<center><img alt="" title="" src="/image/2019/03/31/Snipaste_2019-03-31_17-21-34.png" /></center>

<p>再之后，你只需要在_posts文件夹中添加形如<code class="language-plaintext highlighter-rouge">y-m-d-name</code>格式的文件，即可实时浏览到你的新文章了。</p>

<h2 id="相关参考">相关参考</h2>

<ul>
  <li><a href="https://help.github.com/en/articles/configuring-jekyll-plugins">原生Github Page<strong>仅</strong>支持的Jekyll插件</a></li>
  <li><a href="https://jekyllrb.com/docs/variables/">Jekyll元变量属性</a></li>
  <li><a href="https://www.rubydoc.info/github/mojombo/jekyll/Jekyll">Jekyll Ruby程序相关ref</a></li>
</ul>

<h2 id="注意事项">注意事项</h2>

<ol>
  <li><strong>修改配置文件后重新运行<code class="language-plaintext highlighter-rouge">jekyll s</code>。</strong></li>
  <li><strong>不要使用中文文件名。</strong>
如果你有在Windows环境下预览博客的需求，请不要使用中文设置你的文件名。否则，URL中会带有中文并以UTF-8的编码形式回传给Jekyll，而它的服务端程序默认接受的是GB2312编码的数据，这时就会出现某个乱码位置无法被找到的错误。与其修改Jekyll程序的源码，我更推荐你不要使用中文给文件命名，毕竟文件名和文章的title不是必须相同的。</li>
  <li>如果你的bundle假死，可以尝试修改<code class="language-plaintext highlighter-rouge">Gemfile</code>文件的第一行:<code class="language-plaintext highlighter-rouge">source "https://gems.ruby-china.com/"</code>
默认情况下运行<code class="language-plaintext highlighter-rouge">jekyll s</code>会提供<code class="language-plaintext highlighter-rouge">导出静态文件(jekyll b)</code> + <code class="language-plaintext highlighter-rouge">为博客提供HTTP服务</code> + <code class="language-plaintext highlighter-rouge">（除了_site文件夹外的）文件变动自动重新生成（到_site文件夹内）</code>的功能。但是，如果修改了配置文件<code class="language-plaintext highlighter-rouge">_config.yml</code>就必须手动重新导出静态文件。</li>
  <li>文章提交后Github Page或许需要一会才会有变化，尤其是css。</li>
  <li>如果favicon变更了，发现页面的不论如何删除缓存都还是旧的，试试<code class="language-plaintext highlighter-rouge">Shift + Ctrl + R</code>。</li>
  <li>_posts里的文章必须形如<code class="language-plaintext highlighter-rouge">y-m-d-name</code>，如<code class="language-plaintext highlighter-rouge">2019-3-31</code>，否则将无法被识别。</li>
  <li>scss文件中如果出现UTF-8编码的中文无法通过本地的<code class="language-plaintext highlighter-rouge">jekyll b</code>。</li>
  <li>对于一个带有Front Matters的页面，如果它不在Collection中(包括include、post)。那么，其他页面通过Page.content获得它的内容将是Unrendered的并且无法手动Render。相反的，如果在Collection中，则可以获得到的是已经渲染过的。</li>
</ol>
:ET